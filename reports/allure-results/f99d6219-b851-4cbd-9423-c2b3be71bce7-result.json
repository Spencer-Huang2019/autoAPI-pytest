{"name": "test_login[1.0-success to register-http://localhost:8899/spencer/api/login-POST-{\"content-type\":\"application/json\"}-{\"userName\":\"spencer\",\"password\":\"123456\"}-{\"status\":\"success\",\"errorCode\":0,\"msg\":\"Succeed to login\"}]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <case.test_Login.Test_Login object at 0x043D7850>, id = 1.0, desc = 'success to register'\nurl = 'http://localhost:8899/spencer/api/login', method = 'POST', headers = '{\"content-type\":\"application/json\"}'\npayload = '{\"userName\":\"spencer\",\"password\":\"123456\"}'\nexpected = '{\"status\":\"success\",\"errorCode\":0,\"msg\":\"Succeed to login\"}'\n\n    @pytest.mark.parametrize(\"id, desc, url, method, headers, payload, expected\", getObj.data())\n    def test_login(self, id, desc, url, method, headers, payload, expected):\n        res = BusApi(id, desc, url, method, headers, payload, expected, \"login\")\n>       allure.attach(\"{0}\".format(res.response()), \"Response\")\n\ncase\\test_Login.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\baseApi.py:67: in response\n    return self.res.json()\nd:\\python38-32\\lib\\site-packages\\requests\\models.py:898: in json\n    return complexjson.loads(self.text, **kwargs)\nd:\\python38-32\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nd:\\python38-32\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x03A6CDF0>\ns = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\\n  \"http://www.w3.org/TR/html4/loose.dtd\">\\n<html>\\n  ...gs2)\\nMySQLdb._exceptions.OperationalError: (2003, \"Can\\'t connect to MySQL server on \\'127.0.0.1\\' (10061)\")\\n\\n-->\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nd:\\python38-32\\lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "4c6cbdd0-681a-43de-8686-e58001ef2a0b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "id", "value": "1.0"}, {"name": "desc", "value": "'success to register'"}, {"name": "url", "value": "'http://localhost:8899/spencer/api/login'"}, {"name": "method", "value": "'POST'"}, {"name": "headers", "value": "'{\"content-type\":\"application/json\"}'"}, {"name": "payload", "value": "'{\"userName\":\"spencer\",\"password\":\"123456\"}'"}, {"name": "expected", "value": "'{\"status\":\"success\",\"errorCode\":0,\"msg\":\"Succeed to login\"}'"}], "start": 1586502583550, "stop": 1586502587881, "uuid": "35bb7bca-8180-40c0-838b-8588f317d1e3", "historyId": "8b1f7c2a71e704a2aefaf543530971a9", "testCaseId": "20f22bc282caecf7af30d63af8179309", "fullName": "case.test_Login.Test_Login#test_login", "labels": [{"name": "feature", "value": "Test login api"}, {"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "DESKTOP-KAVVNMT"}, {"name": "thread", "value": "9240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_Login"}]}